#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class tagResult:
  """
  Attributes:
   - pos_tag
   - neg_tag
   - polarity_res
   - range_res_lower
   - range_res_upper
   - kv_value
   - mk_str
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'pos_tag', (TType.STRING,None), None, ), # 1
    (2, TType.LIST, 'neg_tag', (TType.STRING,None), None, ), # 2
    (3, TType.MAP, 'polarity_res', (TType.STRING,None,TType.STRING,None), None, ), # 3
    (4, TType.MAP, 'range_res_lower', (TType.STRING,None,TType.DOUBLE,None), None, ), # 4
    (5, TType.MAP, 'range_res_upper', (TType.STRING,None,TType.DOUBLE,None), None, ), # 5
    (6, TType.MAP, 'kv_value', (TType.STRING,None,TType.STRING,None), None, ), # 6
    (7, TType.STRING, 'mk_str', None, None, ), # 7
  )

  def __init__(self, pos_tag=None, neg_tag=None, polarity_res=None, range_res_lower=None, range_res_upper=None, kv_value=None, mk_str=None,):
    self.pos_tag = pos_tag
    self.neg_tag = neg_tag
    self.polarity_res = polarity_res
    self.range_res_lower = range_res_lower
    self.range_res_upper = range_res_upper
    self.kv_value = kv_value
    self.mk_str = mk_str

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.pos_tag = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString()
            self.pos_tag.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.neg_tag = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readString()
            self.neg_tag.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.polarity_res = {}
          (_ktype13, _vtype14, _size12 ) = iprot.readMapBegin()
          for _i16 in xrange(_size12):
            _key17 = iprot.readString()
            _val18 = iprot.readString()
            self.polarity_res[_key17] = _val18
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.range_res_lower = {}
          (_ktype20, _vtype21, _size19 ) = iprot.readMapBegin()
          for _i23 in xrange(_size19):
            _key24 = iprot.readString()
            _val25 = iprot.readDouble()
            self.range_res_lower[_key24] = _val25
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.range_res_upper = {}
          (_ktype27, _vtype28, _size26 ) = iprot.readMapBegin()
          for _i30 in xrange(_size26):
            _key31 = iprot.readString()
            _val32 = iprot.readDouble()
            self.range_res_upper[_key31] = _val32
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.MAP:
          self.kv_value = {}
          (_ktype34, _vtype35, _size33 ) = iprot.readMapBegin()
          for _i37 in xrange(_size33):
            _key38 = iprot.readString()
            _val39 = iprot.readString()
            self.kv_value[_key38] = _val39
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.mk_str = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('tagResult')
    if self.pos_tag is not None:
      oprot.writeFieldBegin('pos_tag', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.pos_tag))
      for iter40 in self.pos_tag:
        oprot.writeString(iter40)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.neg_tag is not None:
      oprot.writeFieldBegin('neg_tag', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.neg_tag))
      for iter41 in self.neg_tag:
        oprot.writeString(iter41)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.polarity_res is not None:
      oprot.writeFieldBegin('polarity_res', TType.MAP, 3)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.polarity_res))
      for kiter42,viter43 in self.polarity_res.items():
        oprot.writeString(kiter42)
        oprot.writeString(viter43)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.range_res_lower is not None:
      oprot.writeFieldBegin('range_res_lower', TType.MAP, 4)
      oprot.writeMapBegin(TType.STRING, TType.DOUBLE, len(self.range_res_lower))
      for kiter44,viter45 in self.range_res_lower.items():
        oprot.writeString(kiter44)
        oprot.writeDouble(viter45)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.range_res_upper is not None:
      oprot.writeFieldBegin('range_res_upper', TType.MAP, 5)
      oprot.writeMapBegin(TType.STRING, TType.DOUBLE, len(self.range_res_upper))
      for kiter46,viter47 in self.range_res_upper.items():
        oprot.writeString(kiter46)
        oprot.writeDouble(viter47)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.kv_value is not None:
      oprot.writeFieldBegin('kv_value', TType.MAP, 6)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.kv_value))
      for kiter48,viter49 in self.kv_value.items():
        oprot.writeString(kiter48)
        oprot.writeString(viter49)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.mk_str is not None:
      oprot.writeFieldBegin('mk_str', TType.STRING, 7)
      oprot.writeString(self.mk_str)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.pos_tag)
    value = (value * 31) ^ hash(self.neg_tag)
    value = (value * 31) ^ hash(self.polarity_res)
    value = (value * 31) ^ hash(self.range_res_lower)
    value = (value * 31) ^ hash(self.range_res_upper)
    value = (value * 31) ^ hash(self.kv_value)
    value = (value * 31) ^ hash(self.mk_str)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class basicStruct:
  """
  Attributes:
   - bs
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'bs', (TType.STRING,None,TType.STRING,None), None, ), # 1
  )

  def __init__(self, bs=None,):
    self.bs = bs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.bs = {}
          (_ktype51, _vtype52, _size50 ) = iprot.readMapBegin()
          for _i54 in xrange(_size50):
            _key55 = iprot.readString()
            _val56 = iprot.readString()
            self.bs[_key55] = _val56
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('basicStruct')
    if self.bs is not None:
      oprot.writeFieldBegin('bs', TType.MAP, 1)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.bs))
      for kiter57,viter58 in self.bs.items():
        oprot.writeString(kiter57)
        oprot.writeString(viter58)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.bs)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
